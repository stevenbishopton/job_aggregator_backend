
services:
  fastapi:
    build: .
    container_name: fastapi_app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 10s # More frequent check once dependencies are up
      timeout: 5s
      retries: 5 # More retries to account for initial application startup
      start_period: 30s # Crucial: Give FastAPI more time to initialize before checks begin
    ports:
      - "8000:8000"
    depends_on:
      redis:
        condition: service_healthy # Wait for Redis health check to pass
      db:
        condition: service_healthy   # Wait for DB health check to pass
    environment:
      - REDIS_URL=${REDIS_URL}
      - DATABASE_URL=${DATABASE_URL}
      - PYTHONPATH=/code
    restart: unless-stopped
    volumes:
      - .:/code
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  celery:
    build: .
    container_name: celery_worker
    depends_on:
      redis:
        condition: service_healthy # Wait for Redis health check to pass
      db:
        condition: service_healthy   # Wait for DB health check to pass
    command: celery -A app.celery_config.celery_app worker --loglevel=INFO
    environment:
      - REDIS_URL=${REDIS_URL}
      - DATABASE_URL=${DATABASE_URL}
      - PYTHONPATH=/code
    volumes:
      - .:/code
    restart: unless-stopped

  celery_beat:
    build: .
    container_name: celery_beat_scheduler
    command: celery -A app.celery_config.celery_app beat --loglevel=INFO
    depends_on:
      redis:
        condition: service_healthy # Wait for Redis health check to pass
      db:
        condition: service_healthy   # Wait for DB health check to pass
      celery:
        condition: service_started # Only 'service_started' is applicable for celery worker
    environment:
      - REDIS_URL=${REDIS_URL}
      - DATABASE_URL=${DATABASE_URL}
      - PYTHONPATH=/code
    volumes:
      - .:/code
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck: # Add a health check for Redis
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s # Check frequently, Redis starts fast
      timeout: 3s
      retries: 5

  db:
    image: postgres:16
    container_name: jobpostgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - jobpostgres_data:/var/lib/postgresql/data
    healthcheck: # Add a health check for PostgreSQL
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"] # Note $$ for env var
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s # Give Postgres some initial time to come up

volumes:
  jobpostgres_data: